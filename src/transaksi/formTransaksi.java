/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package transaksi;

import static groovy.ui.text.FindReplaceUtility.dispose;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;
import mainOwner.MainOwner;

/**
 *
 * @author sartriaardianthauno
 */

public class formTransaksi extends javax.swing.JPanel {
    private String idEdit;    
    private mainOwner.MainOwner mainInstance;
    
    
    public formTransaksi() {
        this.mainInstance =  mainInstance;
        initComponents();
               
        populateProdukSelectBox();
        kelFaktur();        
//        populatedCmbMember();  

//        txt_totalHarga.setEditable(false);
//        txt_grandTotal.setEditable(false);
//        txt_biaya_tambahan2.setEditable(false);
//        txt_diskon2.setEditable(false);
        txt_totalPembayaran.setEditable(false);
        txt_kembalian.setEditable(false);
        txt_harga.setEditable(false);
        txt_jenis.setEditable(false);
        txt_tglPembikinan.setEditable(false);
        txt_totalHarga.setEditable(false);
//        txt_hari.setEditable(false);
//        txt_jam.setEditable(false);
    }
     
    public formTransaksi(String idEdit) {
        this.idEdit = idEdit;
        System.out.println("idEdit transaksi: "+this.idEdit);
        initComponents(); // Call initComponents after setting idEdit
        getEditIdData(this.idEdit);
        System.out.println("idEdit: "+idEdit);
//        
        populateProdukSelectBox();
        kelFaktur();
        
        txt_totalPembayaran.setEditable(false);
        txt_kembalian.setEditable(false);
        txt_harga.setEditable(false);
        txt_jenis.setEditable(false);
        txt_tglPembikinan.setEditable(false);
        txt_totalHarga.setEditable(false);
//        populatedCmbMember();        
//        
//        // set not edible
//        cmb_member.setEditable(false);
//        txt_pelanggan.setEditable(false);
//        txt_hp.setEditable(false);
//        
//        txt_pelanggan.setBackground(new Color(224, 218, 218));
//        txt_hp.setBackground(new Color(224, 218, 218));
//        cmb_member.setBackground(new Color(224, 218, 218));
//        txt_hari.setEditable(false);
//        txt_jam.setEditable(false);
//        
//        jLabel11.setText("Edit Transaksi");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_simpan_cetak = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        modelTable = new javax.swing.JTable();
        lbl_faktur = new javax.swing.JLabel();
        txt_jumlah = new javax.swing.JTextField();
        cmb_member = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_catatan = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_dikirm = new javax.swing.JScrollPane();
        txt_alamat = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btn_simpanProduk = new javax.swing.JButton();
        txt_totalPembayaran = new javax.swing.JTextField();
        txt_pelanggan = new javax.swing.JTextField();
        txt_tglPembikinan = new javax.swing.JTextField();
        ck_pengiriman = new javax.swing.JRadioButton();
        txt_hp = new javax.swing.JTextField();
        txt_kembalian = new javax.swing.JTextField();
        txt_pembayaran = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txt_jenis = new javax.swing.JTextField();
        txt_batasWaktu = new javax.swing.JTextField();
        txt_harga = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btn_simpan = new javax.swing.JButton();
        btn_kembali = new javax.swing.JButton();
        cmb_produk = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmb_statusPembayaran = new javax.swing.JComboBox<>();
        cmb_tunai = new javax.swing.JComboBox<>();
        btn_deleteProduk = new javax.swing.JButton();
        txt_totalHarga = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(237, 237, 237));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_simpan_cetak.setBackground(new java.awt.Color(0, 140, 192));
        btn_simpan_cetak.setForeground(new java.awt.Color(255, 255, 255));
        btn_simpan_cetak.setText("Simpan & Cetak");
        add(btn_simpan_cetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 555, 140, 25));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel2.setText("No HP");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, 20));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel4.setText("Nama");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, 20));

        modelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama", "Jenis", "Harga", "Jumlah", "Total Harga"
            }
        ));
        jScrollPane1.setViewportView(modelTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 930, 110));

        lbl_faktur.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lbl_faktur.setText("No Faktur");
        add(lbl_faktur, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 100, 40));

        txt_jumlah.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_jumlahFocusLost(evt);
            }
        });
        txt_jumlah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_jumlahActionPerformed(evt);
            }
        });
        add(txt_jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, 130, -1));

        cmb_member.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Anggota Deposit --" }));
        add(cmb_member, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 210, -1));

        txt_catatan.setColumns(20);
        txt_catatan.setLineWrap(true);
        txt_catatan.setWrapStyleWord(true);
        txt_catatan.setBorder(null);
        jScrollPane2.setViewportView(txt_catatan);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 460, 150, 70));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel6.setText("Deposit");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel8.setText("Kembalian");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, -1, -1));

        txt_alamat.setColumns(20);
        txt_alamat.setLineWrap(true);
        txt_alamat.setRows(1);
        txt_alamat.setWrapStyleWord(true);
        txt_dikirm.setViewportView(txt_alamat);

        add(txt_dikirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 460, 170, 70));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel9.setText("Catatan");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 430, 80, 30));

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel11.setText("Grand Total");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, -1, -1));

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel12.setText("Tanggal Pembuatan");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, -1, -1));

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel13.setText("Batas Waktu");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 120, -1, -1));

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel15.setText("Pembayaran");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, -1));

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel14.setText("Jumlah");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, -1, -1));

        btn_simpanProduk.setBackground(new java.awt.Color(0, 146, 187));
        btn_simpanProduk.setForeground(new java.awt.Color(255, 255, 255));
        btn_simpanProduk.setText("Tambah");
        btn_simpanProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanProdukActionPerformed(evt);
            }
        });
        add(btn_simpanProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 190, -1, -1));

        txt_totalPembayaran.setBackground(new java.awt.Color(238, 238, 238));
        txt_totalPembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalPembayaranActionPerformed(evt);
            }
        });
        add(txt_totalPembayaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 440, 190, -1));

        txt_pelanggan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pelangganActionPerformed(evt);
            }
        });
        add(txt_pelanggan, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 210, -1));

        txt_tglPembikinan.setBackground(new java.awt.Color(238, 238, 238));
        txt_tglPembikinan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_tglPembikinanActionPerformed(evt);
            }
        });
        add(txt_tglPembikinan, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 80, 120, -1));

        ck_pengiriman.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        ck_pengiriman.setText("Dikirim Ke Alamat");
        ck_pengiriman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ck_pengirimanActionPerformed(evt);
            }
        });
        add(ck_pengiriman, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 430, 170, 30));
        add(txt_hp, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 210, -1));

        txt_kembalian.setBackground(new java.awt.Color(238, 238, 238));
        add(txt_kembalian, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 500, 190, -1));

        txt_pembayaran.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_pembayaranFocusLost(evt);
            }
        });
        txt_pembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pembayaranActionPerformed(evt);
            }
        });
        add(txt_pembayaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, 190, -1));

        jLabel16.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel16.setText("Produk");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, -1, -1));

        jLabel17.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel17.setText("Jenis");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, -1, -1));

        txt_jenis.setBackground(new java.awt.Color(238, 238, 238));
        txt_jenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_jenisActionPerformed(evt);
            }
        });
        add(txt_jenis, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 130, -1));

        txt_batasWaktu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_batasWaktuActionPerformed(evt);
            }
        });
        add(txt_batasWaktu, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 120, 120, -1));

        txt_harga.setBackground(new java.awt.Color(238, 238, 238));
        txt_harga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_hargaActionPerformed(evt);
            }
        });
        add(txt_harga, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 130, 130, -1));

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel18.setText("Harga");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, -1, -1));

        btn_simpan.setBackground(new java.awt.Color(0, 140, 192));
        btn_simpan.setForeground(new java.awt.Color(255, 255, 255));
        btn_simpan.setText("Simpan");
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });
        add(btn_simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 555, -1, 25));

        btn_kembali.setBackground(new java.awt.Color(255, 152, 0));
        btn_kembali.setText("Kembali");
        btn_kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kembaliActionPerformed(evt);
            }
        });
        add(btn_kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 555, -1, 25));

        cmb_produk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Pilih Produk --" }));
        cmb_produk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_produkActionPerformed(evt);
            }
        });
        add(cmb_produk, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, 130, -1));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel3.setText("DBS");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, -1, -1));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel5.setText("UPS");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, -1, -1));

        cmb_statusPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sudah Dibayar", "Belum Dibayar" }));
        add(cmb_statusPembayaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 440, 130, -1));

        cmb_tunai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tunai", "Non Tunai" }));
        cmb_tunai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_tunaiActionPerformed(evt);
            }
        });
        add(cmb_tunai, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 470, 130, -1));

        btn_deleteProduk.setBackground(new java.awt.Color(255, 51, 51));
        btn_deleteProduk.setText("delete produk");
        btn_deleteProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteProdukActionPerformed(evt);
            }
        });
        add(btn_deleteProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 250, -1, 20));

        txt_totalHarga.setBackground(new java.awt.Color(238, 238, 238));
        txt_totalHarga.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_totalHargaFocusLost(evt);
            }
        });
        txt_totalHarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalHargaActionPerformed(evt);
            }
        });
        add(txt_totalHarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 190, 130, -1));

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel20.setText("Total");
        add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 190, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transaksi/desainFormT1.png"))); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 600));
    }// </editor-fold>//GEN-END:initComponents

    private void txt_jumlahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_jumlahActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        hargaProduk = Integer.parseInt(txt_harga.getText());
        jumlahProduk =  Integer.parseInt(txt_jumlah.getText());
//        String diskonText = txt_diskon.getText().trim();
//        String biayaTambahanText = txt_biaya_tambahan.getText().trim();
//        biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);
//        diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);
//        totalHarga += biayaTambahan;
//        totalHarga -= diskon;
        
//        totalHarga = jumlahProduk * hargaProduk;
        totalHarga = jumlahProduk == 1 ? hargaProduk : jumlahProduk * hargaProduk;

        txt_harga.setText(String.valueOf(totalHarga));
    }//GEN-LAST:event_txt_jumlahActionPerformed

    private void txt_pelangganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pelangganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pelangganActionPerformed

    private void txt_tglPembikinanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_tglPembikinanActionPerformed
        // TODO add your handling code here:      
    }//GEN-LAST:event_txt_tglPembikinanActionPerformed

    private void txt_jenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_jenisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_jenisActionPerformed

    private void txt_batasWaktuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_batasWaktuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_batasWaktuActionPerformed

    private void txt_totalPembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalPembayaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalPembayaranActionPerformed

    private void txt_hargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_hargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_hargaActionPerformed

    private void ck_pengirimanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ck_pengirimanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ck_pengirimanActionPerformed

    private void btn_simpanProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanProdukActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        addToTable();
        
        String selectedProduct = cmb_produk.getSelectedItem().toString();

//        populateBatasWaktu(selectedProduct);
    }//GEN-LAST:event_btn_simpanProdukActionPerformed

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
//        // TODO add your handling code here:
        simpanData();  
        
        kembali();
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void btn_kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kembaliActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        GrandTotal = 0;
        TotalPembayaran = 0;
        Kembalian = 0;
        Pembayaran = 0;
        TotalGrandTotal = 0;
        //    TotalBiayaTambahan = 0;
        TotalDiskon = 0;

//        dispose();

        kembali();
    }//GEN-LAST:event_btn_kembaliActionPerformed

    private void cmb_tunaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_tunaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_tunaiActionPerformed

    private void btn_deleteProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteProdukActionPerformed
        // TODO add your handling code here:
        if (idEdit != null) {
            int selectedRow = modelTable.getSelectedRow();
            DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        //    System.out.println("modelTable: "+modelTable.getSelectedRow()); // result = 0
        //    System.out.println("tableModel: "+tableModel.getRowCount());

            if (selectedRow != -1 && selectedRow < tableModel.getRowCount()) {
                try {
                    System.out.println("running delete transaksi");
                    
                    // Get the value of the "NO" column from the selected row
                    int no_detail_transaksi = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("No").getModelIndex()).toString());
                    System.out.println("no_detail_transaksi to be deleted: " + no_detail_transaksi);
                    System.out.println("idEdit to be deleted: " + idEdit);

                    // Display a confirmation dialog
                    int confirmDialogResult = JOptionPane.showConfirmDialog(null, "Do you really want to delete this row?", "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (confirmDialogResult == JOptionPane.YES_OPTION) {
                        String deleteDetailSql = "DELETE FROM detail_transaksi WHERE kode_transaksi = ? AND detailId = ?";
                        Connection conn = koneksi.configDB();
                        PreparedStatement pstdeleteDetailSql = conn.prepareStatement(deleteDetailSql);

                        // Set the values for the placeholders in the SQL query
                        pstdeleteDetailSql.setString(1, idEdit);
                        pstdeleteDetailSql.setInt(2, no_detail_transaksi);

                        // Execute the SQL query
                        int rowsAffected = pstdeleteDetailSql.executeUpdate();

                        if (rowsAffected > 0) {
                            System.out.println("Row deleted successfully");
                            deleteSelectedRow();
                            tableModel.fireTableDataChanged();
                        } else {
                            System.out.println("No rows deleted");
                        }
                    } else {
                        System.out.println("Membatalkan menghapus");
                    }
                    
                   
                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "gagal menghapus");
                    JOptionPane.showMessageDialog(null, "Error deleting row from database: " + e.getMessage());
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Tolong pilih barisan di table yang ingin dihapus.");
            }
            
        } else {
            // If idEdit is 0, call deleteSelectedRow() directly
            deleteSelectedRow();
        }
//        populateBatasWaktuAfter((DefaultTableModel) modelTable.getModel());
    }//GEN-LAST:event_btn_deleteProdukActionPerformed

    private void cmb_produkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_produkActionPerformed
        // TODO add your handling code here:
        System.out.println("cmb produk coba ");
        String selectedProduct = cmb_produk.getSelectedItem().toString();

        populateJenisComboBox(selectedProduct); 
//        txt_totalHarga.setText(null);
    }//GEN-LAST:event_cmb_produkActionPerformed

    private void txt_jumlahFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_jumlahFocusLost
        // TODO add your handling code here:
                // TODO add your handling code here:
        hargaProduk = Integer.parseInt(txt_harga.getText());
        jumlahProduk =  Integer.parseInt(txt_jumlah.getText());
//        String diskonText = txt_diskon.getText().trim();
//        String biayaTambahanText = txt_biaya_tambahan.getText().trim();
//        biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);
//        diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);

        totalHarga = jumlahProduk * hargaProduk;
//        totalHarga += biayaTambahan;
        totalHarga -= diskon;
        txt_totalHarga.setText(String.valueOf(totalHarga));
    }//GEN-LAST:event_txt_jumlahFocusLost

    private void txt_totalHargaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_totalHargaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalHargaFocusLost

    private void txt_totalHargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalHargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalHargaActionPerformed

    private void txt_pembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pembayaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pembayaranActionPerformed

    private void txt_pembayaranFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pembayaranFocusLost
        // TODO add your handling code here:
    try {
        // Assuming Pembayaran and TotalPembayaran are properly initialized somewhere in your code
        //   int pembayaran = Integer.parseInt(txt_pembayaran.getText().trim());
        int TotalPembayaran = Integer.parseInt(txt_totalPembayaran.getText().trim());

        String pembayaranText = txt_pembayaran.getText().trim();

        if (!pembayaranText.isEmpty()) {
            int pembayaran = Integer.parseInt(pembayaranText);
            int kembalian = pembayaran - TotalPembayaran ;

            if (idEdit != null) {
                kembalian = pembayaran - TotalPembayaran;
                System.out.println("kembalian: " + kembalian);
            } else {
                kembalian = Pembayaran - TotalPembayaran + pembayaran;
            }

            txt_kembalian.setText(String.valueOf(kembalian));
        } else {
            // Handle the case when the text is empty
            System.out.println("Pembayaran text is empty");
            // You might want to show an error message to the user or take appropriate action.
        }
    } catch (NumberFormatException e) {
        // Handle the exception, for example, show an error message to the user.
        e.printStackTrace();
    }

    }//GEN-LAST:event_txt_pembayaranFocusLost

     /* private variabel */
    private int diskon = 0;
    private int biayaTambahan = 0;
    private int jumlahProduk;
    private int hargaProduk;
    private int totalHarga;
    public static int GrandTotal;
    public static int TotalPembayaran;
    public static int Kembalian;
    public static int Pembayaran;
    public static int TotalGrandTotal;
    public static int TotalBiayaTambahan = 0;
    public static int TotalDiskon;
    
    /* array */
    private ArrayList<Vector<Object>> data = new ArrayList<>();
    
    /* array yang akan dilempar */ 
    private static ArrayList<Integer> totalGrandTotalList = new ArrayList<>();
    private static ArrayList<Integer> totalDiskon = new ArrayList<>();
    
    
    /* ADD TABLE PRODUK */
    private void addToTable() {
         // Deklarasi
        try {
            int detailId = modelTable.getRowCount() + 1;
            String namaProduk = cmb_produk.getSelectedItem().toString();
            
            if (isProductAlreadyAdded(namaProduk)) {
                JOptionPane.showMessageDialog(null, "Produk dengan nama yang sama sudah ada di tabel.");
                return;
            }
            String jenisProduk = txt_jenis.getText();
            jumlahProduk = Integer.parseInt(txt_jumlah.getText());

            hargaProduk = Integer.parseInt(txt_harga.getText());
            
            // Parse and handle diskon input
//            String diskonText = txt_diskon.getText().trim();
//            diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);

            // Parse and handle biayaTambahan input
//            String biayaTambahanText = txt_biaya_tambahan.getText().trim();
//            biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);

            /*   Rumus    */
            totalHarga = jumlahProduk * hargaProduk;
//            totalHarga += biayaTambahan;
            totalHarga -= diskon;
            
            System.out.println("Total Harga: " + totalHarga);
//            txt_totalHarga.setText(String.valueOf(totalHarga));
           
             /*   Table add row     */
            DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

            Vector<Object> row = new Vector<>();
            row.add(detailId);
            row.add(namaProduk);
            row.add(jenisProduk);
            row.add(hargaProduk);
            row.add(jumlahProduk);
//            row.add(biayaTambahan);
//            row.add(diskon);
            row.add(totalHarga);

            tableModel.addRow(row);

            /* grand total */
            int gtotal = jumlahProduk * hargaProduk;

            // nilai grand total
            TotalGrandTotal += gtotal;
//            txt_grandTotal.setText(String.valueOf(TotalGrandTotal));

            // total nilai biaya tambahan
//            if (!txt_biaya_tambahan.getText().trim().isEmpty()) {
////                int biayaTambahanValue = Integer.parseInt(txt_biaya_tambahan.getText().trim());
////                TotalBiayaTambahan += biayaTambahanValue;
////                    TotalBiayaTambahan += biayaTambahan;
//                txt_biaya_tambahan2.setText(String.valueOf(TotalBiayaTambahan));
//            }

            // total nilai diskon ERROR
//            if (!txt_diskon.getText().trim().isEmpty()) {
////                int diskonValue = Integer.parseInt(txt_diskon.getText().trim());
//                TotalDiskon += diskon;
//                txt_diskon2.setText(String.valueOf(TotalDiskon));
//            }

            // total Pembayaran
            TotalPembayaran = countNumbersInColumn("Total Harga");
            txt_totalPembayaran.setText(String.valueOf(TotalPembayaran));

            // Pembayaran
            Pembayaran = txt_pembayaran.getText().trim().isEmpty() ? 0 : Integer.parseInt(txt_pembayaran.getText().trim());
            txt_pembayaran.setText(String.valueOf(Pembayaran));

            // Kembalian
            Kembalian = Pembayaran - TotalPembayaran;
            txt_kembalian.setText(String.valueOf(Kembalian));
            
            data.add(row);
            System.out.println("Data size after adding a row: " + data.size());
            System.out.println("Row added to data: " + row);
            
             // TODO add your handling code here:
//        cmb_produk.setSelectedIndex(0);
//        cmb_jenis.removeAllItems();
//        txt_jumlah.setText(null);
//        txt_harga.setText(null);
//        txt_diskon.setText(null);
//        txt_biaya_tambahan.setText(null);
//        txt_totalHarga.setText(null);

        } catch (NumberFormatException e) {
            // Log the exception details
            System.err.println("Error parsing integer:");
            e.printStackTrace();

            // Show a dialog with a specific error message
            JOptionPane.showMessageDialog(null, "Masukan tidak valid. Silakan masukkan nilai numerik yang valid.");
        }   
    }
    
    private boolean isProductAlreadyAdded(String productName) {
        DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String existingProductName = tableModel.getValueAt(i, 1).toString(); // Assuming the product name is in the second column
            if (productName.equals(existingProductName)) {
                return true; // Produk sudah ada di tabel
            }
        }
        return false; // Produk belum ada di tabel
    }
    
    // Delete produk item row
     private void deleteSelectedRow() {
        int selectedRow = modelTable.getSelectedRow();
        DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        if (selectedRow != -1 && selectedRow < tableModel.getRowCount()) {
            if (selectedRow != -1 && selectedRow < data.size()) {
                System.out.println("removing data detail transaksi");
                data.remove(selectedRow);
            }
            // Retrieve values from the removed row
            int dkgrand = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Total Harga").getModelIndex()).toString());
            int djumlah = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Jumlah").getModelIndex()).toString());
            int dharga = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Harga").getModelIndex()).toString());
//            int dtambahan = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Tambahan").getModelIndex()).toString());
//            int ddiskon = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Diskon").getModelIndex()).toString());

            // Update totalPembayaran and txt_totalPembayaran
            int totalPembayaran = countNumbersInColumn("Total Harga");
            TotalPembayaran = totalPembayaran - dkgrand;
            txt_totalPembayaran.setText(String.valueOf(TotalPembayaran));

            // Update ktotal and rgrand
            int ktotal = djumlah * dharga;
            int rgrand = TotalGrandTotal - ktotal;
            TotalGrandTotal -= ktotal;  // Subtract ktotal from TotalGrandTotal
//            txt_grandTotal.setText(String.valueOf(rgrand));
            
            
//            TotalBiayaTambahan -= dtambahan;
//            txt_biaya_tambahan2.setText(String.valueOf(TotalBiayaTambahan));
            
//            TotalDiskon -= ddiskon;
//            txt_diskon2.setText(String.valueOf(TotalDiskon));
            
            int kembalian = Pembayaran - TotalPembayaran ;
            txt_kembalian.setText(String.valueOf(kembalian));

            // Remove the selected row from the table model
            tableModel.removeRow(selectedRow);
            
//            int detailId = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("no").getModelIndex()).toString());
            
                    // Debugging statements
                    System.out.println("tpemba:" + TotalPembayaran);
                    System.out.println("rgrand:" + rgrand);
                    System.out.println("ktotal:" + ktotal);
                } else {
                    JOptionPane.showMessageDialog(null, "Tolong pilih barisan di table yang ingin dihapus.");
                }
    }
     
    // Produk pilih untuk dimasukan kedalam table
    private Map<String, ProdukInfo> produkMap = new HashMap<>();
    
    public static class ProdukInfo {
        private final String idProduk;
        private final String namaProduk;

        public ProdukInfo(String idProduk, String namaProduk) {
            this.idProduk = idProduk;
            this.namaProduk = namaProduk;
        }

        public String getIdProduk() {
            return idProduk;
        }

        public String getNamaProduk() {
            return namaProduk;
        }

        @Override
        public String toString() {
            return "ProdukInfo{id=" + idProduk + ", nama='" + namaProduk + "'}";
        }
    }
    
    // Produk pilih produk untuk dimasukan kedalam table
    private void populateProdukSelectBox() {
        try {
            String sql = "SELECT id_produk, nama_produk FROM produk";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            java.sql.ResultSet rs = pst.executeQuery();

            // Clear existing items and reset the produkMap
    //        cmb_produk.removeAllItems();
            produkMap.clear();

            while (rs.next()) {
                String idProduk = rs.getString("id_produk");
                String productName = rs.getString("nama_produk");

                // Create a new ProdukInfo instance
                ProdukInfo produkInfo = new ProdukInfo(idProduk, productName);

                // Store the association in the produkMap
                produkMap.put(productName, produkInfo);
               

                cmb_produk.addItem(productName);                
//                System.out.println("Added product: " + produkInfo);
            }

            rs.close();
            pst.close();
            conn.close();
            
             

            // Print the contents of the produkMap
//            System.out.println("Produk Map:");
            for (Map.Entry<String, ProdukInfo> entry : produkMap.entrySet()) {
                ProdukInfo produkInfo = entry.getValue();
//                System.out.println("Product: " + entry.getKey() + ", Info: " + produkInfo + ", idProduk: " + produkInfo.getIdProduk());
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    // Produk pilih jenis untuk dimasukan kedalam table
    private void populateJenisComboBox(String selectedProduct) {
        try {
            ProdukInfo selectedProdukInfo = produkMap.get(selectedProduct);

        if (selectedProdukInfo != null) {
            String sql = "SELECT jenis_produk, Harga_produk FROM produk WHERE id_produk = ?";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);

            pst.setString(1, selectedProdukInfo.getIdProduk());

            java.sql.ResultSet rs = pst.executeQuery();

            txt_jenis.setText("");

//            int selectedIndex = cmb_produk.getSelectedIndex();
//            if (selectedIndex == "") {
////                System.out.println("Adding Default Jenis");
//                // Handle default selection differently
//                cmb_jenis.addItem("Default Jenis"); // Add a default jenis item
//                txt_harga.setText(null); // Set a default harga
//            } else {
                while (rs.next()) {
                    String jenisProduk = rs.getString("jenis_produk");
                    hargaProduk = rs.getInt("Harga_produk");
                    txt_jenis.setText(jenisProduk);
                    txt_harga.setText(String.valueOf(hargaProduk));
                    txt_jumlah.setText("1");
                    txt_totalHarga.setText(String.valueOf(hargaProduk));
                }
//            }

                rs.close();
                pst.close();
                conn.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    // menghitung column table item produk
    private int countNumbersInColumn(String columnName) {       
        int totalCount = 0;    
        DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        int columnIndex = -1;
        for (int i = 0; i < tableModel.getColumnCount(); i++) {
            if (tableModel.getColumnName(i).trim().equals(columnName)) {
                columnIndex = i;
                break;
            }
        }

        if (columnIndex != -1) {
            // Iterate through rows and sum up the numbers in the specified column
            for (int row = 0; row < tableModel.getRowCount(); row++) {
                Object value = tableModel.getValueAt(row, columnIndex);

                if (value instanceof Number) {
                    totalCount += ((Number) value).intValue();
                }
            }

            System.out.println("Total Count in column " + columnName + ": " + totalCount);
        } else {
            System.out.println("Column not found: " + columnName);
        }  
        return totalCount;
    }
    
    /* menyimpan data baru dan memperbarui data lama fungsi tamabh dan edit */
    private void simpanData() {
    try {
        String idEdit = this.idEdit;
        String hp = txt_hp.getText();

        String sql;
        if (idEdit != null) {
            System.out.println("edit pelanggan none");
        } else {
            sql = "INSERT INTO pelanggan (kode_pelanggan, nama, no_hp) VALUES (?, ?, ?)";
            try (Connection conn = koneksi.configDB();
                PreparedStatement pst = conn.prepareStatement(sql)) {
                String idPelanggan = generateUserId(conn);
                pst.setString(1, idPelanggan);
                pst.setString(2, txt_pelanggan.getText());
                pst.setString(3, hp);
                pst.executeUpdate();
            }
        }

        try (Connection conn = koneksi.configDB();
            Statement state = conn.createStatement()) {
            LocalDateTime localDateTime = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
            Timestamp sqlTimestamp = Timestamp.valueOf(localDateTime);

            LocalDateTime myDateTime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            String formattedDateTime = myDateTime.format(formatter);
            LocalDateTime parsedDateTime = LocalDateTime.parse(formattedDateTime, formatter);
            Timestamp timestamp = Timestamp.valueOf(parsedDateTime);

            int pembayaraan = Integer.parseInt(txt_pembayaran.getText().trim());
            int totalPembayaraan = Integer.parseInt(txt_totalPembayaran.getText().trim());

            int kembaliaan = pembayaraan - totalPembayaraan ;

            int statusPengiriman = ck_pengiriman.isSelected() ? 1 : 0;

            String getUID;
            ResultSet res;
            if (idEdit != null) {
                getUID = "SELECT kode_pelanggan FROM transaksi WHERE kode_transaksi = '" + idEdit +"' ";
            } else {
                getUID = "SELECT kode_pelanggan FROM pelanggan ORDER BY kode_pelanggan DESC LIMIT 1";
            }

            res = state.executeQuery(getUID);

            String idPelanggan;
            if (res.next()) {
                idPelanggan = res.getString("kode_pelanggan");
                res.close();

                String sql1;
                if (idEdit != null) {
                    sql1 = "UPDATE transaksi SET tgl_transaksi=?, kode_pelanggan=?, id_user=?, dibayar_secara=?, " +
                            "status_pembayaran=?, totalPembayaran=?, " +
                            "pembayaran=?, kembalian=?, statusPengiriman=?, tanggal_masuk=?, batas_waktu=?, " +
                            "alamat_pengiriman=?, catatan=? WHERE kode_transaksi = ?";
                } else {
                    sql1 = "INSERT INTO transaksi (tgl_transaksi, kode_pelanggan, id_user, dibayar_secara, "
                            + "status_laundry, status_pembayaran , totalPembayaran, pembayaran, kembalian, "
                            + "statusPengiriman, tanggal_masuk, batas_waktu, alamat_pengiriman, catatan, kode_transaksi) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                }
                    PreparedStatement pst1 = conn.prepareStatement(sql1);
//                try () {
                    pst1.setTimestamp(1, sqlTimestamp);
                    pst1.setString(2, idPelanggan);
//                    pst1.setString(3, String.valueOf(login.Login.userId));
                    pst1.setString(3, String.valueOf(login.Login.userId));
                    pst1.setString(4, String.valueOf(cmb_tunai.getSelectedItem()));
                    if (idEdit != null) {
                        pst1.setString(5, String.valueOf(cmb_statusPembayaran.getSelectedItem()));
//                        pst1.setInt(6, TotalGrandTotal);
                        pst1.setInt(6, TotalPembayaran);
                        pst1.setInt(7, pembayaraan);
                        pst1.setInt(8, kembaliaan);
                        pst1.setInt(9, statusPengiriman);
                        pst1.setTimestamp(10, sqlTimestamp);
                        pst1.setTimestamp(11, timestamp);
                        pst1.setString(12, txt_alamat.getText());
                        pst1.setString(13, String.valueOf(txt_catatan.getText()));
                        pst1.setString(14, idEdit);
                    } else {
                        //kd transaksi maker
                        String kdTransaksi = generateTransaksiId(conn);
                        
                        pst1.setInt(5, 1);
                        pst1.setString(6, String.valueOf(cmb_statusPembayaran.getSelectedItem()));
//                        pst1.setInt(7, TotalGrandTotal);
                        pst1.setInt(7, TotalPembayaran);
                        pst1.setInt(8, pembayaraan);
                        pst1.setInt(9, kembaliaan);
                        pst1.setInt(10, statusPengiriman);
                        pst1.setTimestamp(11, sqlTimestamp);
                        pst1.setTimestamp(12, timestamp);
                        pst1.setString(13, String.valueOf(txt_alamat.getText()));
                        pst1.setString(14, String.valueOf(txt_catatan.getText()));
                        pst1.setString(15, kdTransaksi);
                    }
                    
                    pst1.executeUpdate();
                    
                    String getUIDT;
                    ResultSet res1;
                    if (idEdit != null) {
                        // If in edit mode, use the provided idEdit to retrieve the corresponding kode_transaksi
                        getUIDT = "SELECT kode_transaksi FROM transaksi WHERE kode_transaksi = ?";
                        pst1 = conn.prepareStatement(getUIDT);
                        pst1.setString(1, idEdit);
                        res1 = pst1.executeQuery();
                    } else {
                        // If not in edit mode, get the last kode_transaksi
                        getUIDT = "SELECT kode_transaksi FROM transaksi ORDER BY kode_transaksi DESC LIMIT 1";
                        pst1 = conn.prepareStatement(getUIDT);
                        res1 = pst1.executeQuery();
                    }
                    
                    String idT = null;  
                    
                    // detail transaksi
                    if (res1.next()) {
                            idT = res1.getString("kode_transaksi");
                            res1.close();
                            System.out.println("res1 running");
            //                System.out.println("idT: "+idT);
            //                System.out.println("Data Size: " + data.size());
                            for (Vector<Object> row : data) {
                                int detailId = Integer.parseInt(row.get(0).toString());
                                String namaProduk = (String) row.get(1);
                                String jenisProduk = (String) row.get(2);
                                int harga = (int) row.get(3);
                                int jumlah = Integer.parseInt(row.get(4).toString());
//                                int biayaTambahan = (int) row.get(5);
//                                int diskon = (int) row.get(5);
                                int totalHarga = (int) row.get(5);

                                try {
                                    System.out.println("try running detai_transaksi");

                                    String id_produk = retrieveProdukId(namaProduk);

                                    String checkQuery = "SELECT COUNT(*) FROM detail_transaksi WHERE detailId = ? AND kode_transaksi = ?";
                                        PreparedStatement checkPst = conn.prepareStatement(checkQuery);
                                        checkPst.setInt(1, detailId);
                                        checkPst.setString(2, idEdit);
                                        ResultSet resultSet = checkPst.executeQuery();

                                        resultSet.next();
                                        int rowCount = resultSet.getInt(1);
                                        
                                        if (idEdit != null) {
                                            if (modelTable.getRowCount() > 0) {
                                                if (rowCount > 0) {
                                                    // detailId already exists, update the existing row
                                                    String updateQuery = "UPDATE detail_transaksi SET id_produk = ?, jumlah = ?, harga = ?, totalHarga = ? WHERE detailId = ?";
                                                    PreparedStatement updatePst = conn.prepareStatement(updateQuery);
                                                    updatePst.setString(1, id_produk); 
                                                    updatePst.setInt(2, jumlah);
                                                    updatePst.setInt(3, harga);
//                                                    updatePst.setInt(4, biayaTambahan);
//                                                    updatePst.setInt(4, diskon);
                                                    updatePst.setInt(4, totalHarga);
                                                    updatePst.setInt(5, detailId);

                                                    updatePst.executeUpdate();
                                                } else {
                                                    String sqlQuery = "INSERT INTO detail_transaksi (kode_transaksi, detailId, id_produk, jumlah, harga, totalHarga) " +
                                                                      "VALUES (?, ?, ?, ?, ?, ?)";
                                                    PreparedStatement pst3 = conn.prepareStatement(sqlQuery);
                                                    pst3.setString(1, idT);  
                                                    pst3.setInt(2, detailId);  
                                                    pst3.setString(3, id_produk); 
                                                    pst3.setInt(4, jumlah);
                                                    pst3.setInt(5, harga);
//                                                    pst3.setInt(6, diskon);
                                                    pst3.setInt(6, totalHarga);
                                                    pst3.executeUpdate();
                                                }
                                            } else {
                                                System.out.println("Selected row has an empty 'NO' value.");
                                            }
                                        } else {
                                            String sqlQuery = "INSERT INTO detail_transaksi (kode_transaksi, detailId, id_produk, jumlah, harga, totalHarga) " +
                                                                      "VALUES (?, ?, ?, ?, ?, ?)";
                                                    PreparedStatement pst3 = conn.prepareStatement(sqlQuery);
                                                    pst3.setString(1, idT);  
                                                    pst3.setInt(2, detailId);  
                                                    pst3.setString(3, id_produk); 
                                                    pst3.setInt(4, jumlah);
                                                    pst3.setInt(5, harga);
//                                                    pst3.setInt(6, diskon);
                                                    pst3.setInt(6, totalHarga);
                                                    pst3.executeUpdate();
                                        }

                                    System.out.println("idT: "+getUIDT);
                                    System.out.println("id_produk: " +id_produk);
                                    System.out.println("jenisProduk: "+jenisProduk);
                                    System.out.println("jumlah: "+jumlah);
                                    System.out.println("harga: "+harga);
                                    System.out.println("diskon: "+diskon);
                                    System.out.println("totalHarga: "+totalHarga);

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                            }

                            // get kode_transaksi
                            String upUIDT;
                            if (idEdit != null) {
                                upUIDT = String.valueOf(idEdit);
                            } else {
                                upUIDT = "SELECT kode_transaksi FROM transaksi ORDER BY kode_transaksi DESC LIMIT 1";
                            }

                            try (ResultSet res2 = idEdit != null ? state.executeQuery("SELECT kode_transaksi FROM transaksi WHERE kode_transaksi = " + idEdit) : state.executeQuery(upUIDT)) {
                                if (res2.next()) {
                                    System.out.println("Running res 2 Test");

                                    String sql3 = "UPDATE transaksi SET totalPembayaran=?, pembayaran=?, kembalian=?" +
                                                  " WHERE kode_transaksi = ?";

                                    try (PreparedStatement pst3 = conn.prepareStatement(sql3)) {
//                                        pst3.setInt(1, TotalGrandTotal);
//                                        pst3.setInt(2, TotalBiayaTambahan);
//                                        pst3.setInt(2, diskon);
                                        pst3.setInt(1, TotalPembayaran);
                                        pst3.setInt(2, pembayaraan);
                                        pst3.setInt(3, kembaliaan);

                                        // Set the kode_transaksi value based on the retrieved value from the SELECT query
                                        pst3.setString(4, "kode_transaksi");

                                        int rowsAffected = pst3.executeUpdate();

                                        if (rowsAffected > 0) {
                                            System.out.println("Update successful");
                                        } else {
                                            System.out.println("Update failed");
                                        }
                                   } catch (Exception e) {
                                       e.printStackTrace();
                                       System.out.println("e: "+e);
                                   }
                               }
                           } catch (Exception e) {
                               e.printStackTrace();
                               System.out.println("e: "+e);
                           }
                        }

                // Anda dapat melanjutkan dengan kode lainnya di sini
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Transaksi Berhasil");
            } else {
                JOptionPane.showMessageDialog(null, "Gagal mendapatkan ID pelanggan");
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        e.printStackTrace();
    }
}

     
     private String retrieveProdukId(String namaProduk) {
        for (Map.Entry<String, ProdukInfo> entry : produkMap.entrySet()) {
            ProdukInfo produkInfo = entry.getValue();
            if (produkInfo.getNamaProduk().equals(namaProduk)) {
                return produkInfo.getIdProduk();
            }
        }
        return null; 
    }
     
    /* Faktur */
    private void kelFaktur() {
        LocalDate currentDate = LocalDate.now();
        
        // Mencetak tanggal saat ini
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDate = currentDate.format(formatter);
        
        // Mengatur nilai dari TextView
        System.out.println("formattedDate pembikinan: "+formattedDate);
        txt_tglPembikinan.setText(formattedDate);
    }

    public void kembali(){
          MainOwner mainInstance = (MainOwner) SwingUtilities.getWindowAncestor(this);
        // Menampilkan kembali panelProduk_O
        mainInstance.showFormOwner(new transaksi.Transaksi(mainInstance));
    }
    
    private String generateUserId(Connection conn) throws SQLException {
        String prefix = "KP"; 
        int number = 1; 
        String idAbsen = ""; 

        boolean idFound = false;
        while (!idFound) {
            String userIdToCheck = prefix + number;
            String query = "SELECT COUNT(*) FROM pelanggan WHERE kode_pelanggan = ?";
            PreparedStatement checkStmt = conn.prepareStatement(query);
            checkStmt.setString(1, userIdToCheck);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                int count = rs.getInt(1);
                if (count == 0) {
                    idAbsen = userIdToCheck;
                    idFound = true;
                } else {
                    number++; // Jika ID sudah digunakan, tambahkan nomor
                }
            }

            rs.close();
            checkStmt.close();
        }

        return idAbsen;
    }
    
    private String generateTransaksiId(Connection conn) throws SQLException {
        String prefix = "TR"; 
        int number = 1; 
        String idAbsen = ""; 

        boolean idFound = false;
        while (!idFound) {
            String userIdToCheck = prefix + number;
            String query = "SELECT COUNT(*) FROM transaksi WHERE kode_transaksi = ?";
            PreparedStatement checkStmt = conn.prepareStatement(query);
            checkStmt.setString(1, userIdToCheck);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                int count = rs.getInt(1);
                if (count == 0) {
                    idAbsen = userIdToCheck;
                    idFound = true;
                } else {
                    number++; // Jika ID sudah digunakan, tambahkan nomor
                }
            }

            rs.close();
            checkStmt.close();
        }

        return idAbsen;
    }
    
    
    //ambil date edit
    private void getEditIdData(String idEdit) {
        
//        Map<String, Object> dataMap = new HashMap<>();
        
        if (idEdit != null) { // Assuming -1 indicates no valid idEdit
            try {
                String idPelanggan = getPelangganID(idEdit) ;
                // Fetch existing data from the database based on idEdit
                String fetchPelangganQuery = "SELECT nama, no_hp, alamat FROM pelanggan WHERE kode_pelanggan =?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                try (PreparedStatement pstFetchPelanggan = conn.prepareStatement(fetchPelangganQuery)) {
                     pstFetchPelanggan.setString(1, idPelanggan);
                    try (ResultSet rsPelanggan = pstFetchPelanggan.executeQuery()) {
                        if (rsPelanggan.next()) {
                            // Set the existing data in your text inputs
                            txt_pelanggan.setText(rsPelanggan.getString("nama"));
                            txt_hp.setText(rsPelanggan.getString("no_hp"));
                            txt_alamat.setText(rsPelanggan.getString("alamat"));
                        }
                    }
                }

                // Fetch existing data from the transaksi table
                String fetchTransaksiQuery = "SELECT * FROM transaksi WHERE kode_transaksi=?";
                try (PreparedStatement pstFetchTransaksi = conn.prepareStatement(fetchTransaksiQuery)) {
                    pstFetchTransaksi.setString(1, idEdit);
                    try (ResultSet rsTransaksi = pstFetchTransaksi.executeQuery()) {
                        if (rsTransaksi.next()) {
                            // Set the existing data in your combo boxes and other UI components
                            cmb_tunai.setSelectedItem(rsTransaksi.getString("dibayar_secara"));
                            
                            cmb_statusPembayaran.setSelectedItem(rsTransaksi.getString("status_pembayaran"));
                            // Set other UI components...
                            if (rsTransaksi.getInt("statusPengiriman") != 0) {
                                ck_pengiriman.setSelected(true);                         
                            } else {
                                ck_pengiriman.setSelected(false);                         
                            }
//                            txt_grandTotal.setText(rsTransaksi.getString("grandTotal"));
//                            txt_biaya_tambahan2.setText(rsTransaksi.getString("biayaTambahan"));
//                            txt_diskon2.setText(rsTransaksi.getString("diskon"));
                            txt_totalPembayaran.setText(rsTransaksi.getString("totalPembayaran"));
                            txt_pembayaran.setText(rsTransaksi.getString("pembayaran"));
                            txt_kembalian.setText(rsTransaksi.getString("kembalian"));
                            
//                            txt_tgl.setValue(rsTransaksi.getDate("tanggal_masuk"));

//                            SimpleDateFormat dateFormat = new SimpleDateFormat("your_date_format_here");
//                            String dateString = dateFormat.format(rsTransaksi.getDate("batas_waktu"));
//                            txt_jam.setText(dateString);


                            txt_alamat.setText(rsTransaksi.getString("alamat_pengiriman"));
                            
                            int kembalian1 = TotalPembayaran + Pembayaran;
                            int kembalian = Pembayaran - kembalian1 ;
//                            Kembalian = Pembayaran - TotalPembayaran;
                            
//                            TotalGrandTotal = Integer.parseInt(rsTransaksi.getString("grandTotal"));
                            TotalPembayaran = Integer.parseInt(rsTransaksi.getString("totalPembayaran"));
//                            Kembalian = Integer.parseInt(rsTransaksi.getString("kembalian"));
                            Kembalian = kembalian;
                            Pembayaran = Integer.parseInt(rsTransaksi.getString("pembayaran"));
//                            TotalBiayaTambahan = Integer.parseInt(rsTransaksi.getString("biayaTambahan"));
//                            TotalDiskon = Integer.parseInt(rsTransaksi.getString("diskon"));
                            txt_catatan.setText(rsTransaksi.getString("catatan"));
                        }
                    }
                }
                    // Fetch existing data from the detail_transaksi table
                    String fetchDetailTransaksiQuery = "SELECT * FROM detail_transaksi WHERE kode_transaksi = ?";
                    try (PreparedStatement pstFetchDetailTransaksi = conn.prepareStatement(fetchDetailTransaksiQuery)) {
                        System.out.println("idEdit sebelum diambil: " + idEdit);
                        pstFetchDetailTransaksi.setString(1, idEdit);
                        try (ResultSet rsDetailTransaksi = pstFetchDetailTransaksi.executeQuery()) {
                            // Clear existing data in your data vector
                            data.clear();

                            while (rsDetailTransaksi.next()) {
                                // Retrieve id_produk from the current row
                                String idProduk = rsDetailTransaksi.getString("id_produk");

                                // Fetch additional details from the 'produk' table based on id_produk
                                String fetchProdukDetailsQuery = "SELECT nama_produk, jenis_produk FROM produk WHERE id_produk=?";
                                try (PreparedStatement pstFetchProdukDetails = conn.prepareStatement(fetchProdukDetailsQuery)) {
                                    pstFetchProdukDetails.setString(1, idProduk);
                                    try (ResultSet rsProdukDetails = pstFetchProdukDetails.executeQuery()) {
                                        if (rsProdukDetails.next()) {
                                            // Change the logic to retrieve actual data from the result set
                                            String jenisProduk = rsProdukDetails.getString("jenis_produk");
                                            String productName = rsProdukDetails.getString("nama_produk");

                                            // Populate your data vector with existing data and additional details
                                            Vector<Object> row = new Vector<>();
                                            row.add(rsDetailTransaksi.getString("detailId"));
                                            row.add(productName);
                                            row.add(jenisProduk);
                                            row.add(rsDetailTransaksi.getInt("jumlah"));
                                            row.add(rsDetailTransaksi.getInt("harga"));
//                                            row.add(rsDetailTransaksi.getInt("biayaTambahan"));
//                                            row.add(rsDetailTransaksi.getInt("diskon"));
                                            row.add(rsDetailTransaksi.getInt("totalHarga"));
                                            // Add the row vector to your data vector
                                            data.add(row);
                                        }
                                    }
                                   
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace(); // Handle SQLException appropriately
                    }
                // For example, update your JTable if you are using one
                DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();
                tableModel.setRowCount(0); // Clear existing data in the table

                for (Vector<Object> row : data) {
                    tableModel.addRow(row); // Add each row from the refreshed data
                }

                // Notify the table that the data has changed
                tableModel.fireTableDataChanged();
                
            } catch (Exception e) {
                e.printStackTrace(); 
            }
//             populateBatasWaktuAfter((DefaultTableModel) modelTable.getModel());
        }
    }
    
    private String getPelangganID(String idTransaksi) {
        try {
            if (idTransaksi != null) {
                String sql = "SELECT kode_pelanggan FROM `transaksi` WHERE kode_transaksi = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setString(1, idTransaksi);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("kode_pelanggan");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }
    
    private String getStatusLaundry(Integer idTransaksi) {
        try {
            if (idTransaksi != null) {
                String sql = "SELECT status_laundry FROM `transaksi` WHERE kode_transaksi = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, idTransaksi);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("status_laundry");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_deleteProduk;
    private javax.swing.JButton btn_kembali;
    private javax.swing.JButton btn_simpan;
    private javax.swing.JButton btn_simpanProduk;
    private javax.swing.JButton btn_simpan_cetak;
    private javax.swing.JRadioButton ck_pengiriman;
    private javax.swing.JComboBox<String> cmb_member;
    private javax.swing.JComboBox<String> cmb_produk;
    private javax.swing.JComboBox<String> cmb_statusPembayaran;
    private javax.swing.JComboBox<String> cmb_tunai;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_faktur;
    private javax.swing.JTable modelTable;
    private javax.swing.JTextArea txt_alamat;
    private javax.swing.JTextField txt_batasWaktu;
    private javax.swing.JTextArea txt_catatan;
    private javax.swing.JScrollPane txt_dikirm;
    private javax.swing.JTextField txt_harga;
    private javax.swing.JTextField txt_hp;
    private javax.swing.JTextField txt_jenis;
    private javax.swing.JTextField txt_jumlah;
    private javax.swing.JTextField txt_kembalian;
    private javax.swing.JTextField txt_pelanggan;
    private javax.swing.JTextField txt_pembayaran;
    private javax.swing.JTextField txt_tglPembikinan;
    private javax.swing.JTextField txt_totalHarga;
    private javax.swing.JTextField txt_totalPembayaran;
    // End of variables declaration//GEN-END:variables
}
