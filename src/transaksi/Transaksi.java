package transaksi;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;
import tabel_aksi.PanelAction;
import tabel_aksi.TableActionCellEditor;
import tabel_aksi.TableActionCellRender;
import tabel_aksi.TableActionEvent;
import tabel_aksi.TableCustomizer;

/**
 *
 * @author sartriaardianthauno
 */

public class Transaksi extends javax.swing.JPanel {
    private mainOwner.MainOwner mainInstance;


    
    private Connection con;
    private Statement stat;
    private PreparedStatement pstm; //java.sql.PreparedStatement;
    private ResultSet res;
    
    /**
     * Creates new form 
     * @param mainInstance
     */
    public Transaksi(mainOwner.MainOwner mainInstance) {
        this.mainInstance =  mainInstance;
        initComponents();
        
        tabel();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        caris = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jlabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jEditorPane1);

        setBackground(new java.awt.Color(237, 237, 237));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(table);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 940, 350));

        caris.setBackground(new java.awt.Color(74, 74, 74));
        caris.setForeground(new java.awt.Color(255, 255, 255));
        caris.setText("Search . . .");
        caris.setBorder(null);
        caris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carisActionPerformed(evt);
            }
        });
        add(caris, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 40, 170, 25));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transaksi/refresh (1) 1.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        jlabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transaksi/plus (3) 1.png"))); // NOI18N
        jlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelMouseClicked(evt);
            }
        });
        add(jlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transaksi/iconTransaksi1.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 26, 50, 50));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 25)); // NOI18N
        jLabel4.setText("Transaksi");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/usser/desainTabel.png"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void carisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carisActionPerformed
        String kataKunci = caris.getText();
//        cariData(kataKunci);
    }//GEN-LAST:event_carisActionPerformed

    private void jlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelMouseClicked
        // TODO add your handling code here:
        if (mainInstance != null) {
            mainInstance.showFormOwner(new transaksi.formTransaksi());
        } else {
            System.out.println("Error. Objek Main Belum ditetapkan");
        }
    }//GEN-LAST:event_jlabelMouseClicked
    
//    public void datatable() {
//        DefaultTableModel tbl = new DefaultTableModel();
//
//        tbl.setColumnCount(0);
//
//        tbl.addColumn("KODE");
//        tbl.addColumn("Nama Pelanggan");
//        tbl.addColumn("Nama Pegawai");
//        tbl.addColumn("Status Pembayaran");
//        tbl.addColumn("Status Laundry");
//        tbl.addColumn("Total Pembayaran");
//        tbl.addColumn("Tanggal Pemasukan");
//        tbl.addColumn("Batas Waktu");
//
//        table.setModel(tbl);
//
//        try {
//            String sql = "SELECT * FROM transaksi";
//            java.sql.Connection conn = (Connection) koneksi.configDB();
//            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
//
//            java.sql.ResultSet res = pst.executeQuery();
//
//            while (res.next()) {
//                // Retrieve the names for id_pelanggan and id_pegawai
//                String namaPelanggan = getNamaPelanggan(res.getString("kode_pelanggan"));
//                String namaPegawai = getNamaPegawai(res.getString("id_user"));
////                int status = res.getInt("transaksi.status_laundry");
////                String statusText;
//               
////                if (status == 1) {
////                        statusText = "prosses";
////                    } else if (status == 2) {
////                        statusText = "Penjadwalan";
////                    } else if (status == 3) {
////                        statusText = "Selesai";
////                    } else {
////                        statusText = "Sudah Lewat";
////                    }
//                
//                tbl.addRow(new Object[]{
//                        res.getString("kode_transaksi"),
//                        namaPelanggan,
//                        namaPegawai,
//                        res.getString("status_pembayaran"),
//                        res.getString("transaksi.status_laundry"),
//                        res.getString("totalPembayaran"),
//                        res.getString("tanggal_masuk"),
//                        res.getString("batas_waktu"),
//                });
////                rowCount();
//            }
//            res.close();
//            pst.close();
////            jLabel3.setText("Jumlah Data: "+rowCount);
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, "gagal table: " + e.getMessage());
//        }    
//    }
    
    public void reloadDataTable() {
        tabel(); // Call the datatable method to reload the data
    }
    
    private String getNamaPelanggan(String kdPelanggan) {
        // Execute a query to fetch the name based on id_pelanggan
        // Replace 'pelanggan' with your actual table name
        String query = "SELECT nama FROM pelanggan WHERE kode_pelanggan = ?";
        try {
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, kdPelanggan);
            java.sql.ResultSet res = pst.executeQuery();
            if (res.next()) {
                return res.getString("nama");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching pelanggan name: " + e.getMessage());
        }
        return "";
    }

    // Method to get the name of pegawai based on id_pegawai
    private String getNamaPegawai(String idUser) {
        // Execute a query to fetch the name based on id_pegawai
        // Replace 'pegawai' with your actual table name
        String query = "SELECT Username FROM user WHERE id_user = ?";
        try {
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, idUser);
            java.sql.ResultSet res = pst.executeQuery();
            if (res.next()) {
                return res.getString("Username");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching pegawai name: " + e.getMessage());
        }
        return "";
    }
    
    
     private void delete() {
        try {
            String deleteTransaksiQuery = "DELETE FROM transaksi WHERE kode_transaksi = ?";
            String deletePelangganQuery = "DELETE FROM pelanggan WHERE kode_pelanggan = ?";

            int selectedRow = table.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Mohon pilih barisan yang di table ingin dihapus");
                return;  
            }

            String idToDelete = String.valueOf(table.getValueAt(selectedRow, table.getColumn("KODE").getModelIndex()));

            String idPelangganToDelete = getPelangganForDelete(idToDelete);

            java.sql.Connection conn = (java.sql.Connection) koneksi.configDB();

            java.sql.PreparedStatement pstTransaksi = conn.prepareStatement(deleteTransaksiQuery);
            pstTransaksi.setString(1, idToDelete);

            java.sql.PreparedStatement pstPelanggan = conn.prepareStatement(deletePelangganQuery);
            pstPelanggan.setString(1, idPelangganToDelete);

            conn.setAutoCommit(false);

            int rowsAffectedTransaksi = pstTransaksi.executeUpdate();
            int rowsAffectedPelanggan = pstPelanggan.executeUpdate();

            if (rowsAffectedTransaksi > 0 && rowsAffectedPelanggan > 0) {
                conn.commit();
                JOptionPane.showMessageDialog(null, "Row deleted successfully!");

                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.removeRow(selectedRow);
            } else {
                // rollback the transaction
                conn.rollback();
                JOptionPane.showMessageDialog(null, "No rows were deleted. Verify the ID exists.");
            }

            pstTransaksi.close();
            pstPelanggan.close();
            conn.setAutoCommit(true);  // Restore auto-commit mode
            conn.close();
        } catch (java.sql.SQLException e) {
            e.printStackTrace();
        }
    }

    private String getPelangganForDelete(String kodeTransaksi) {
        try {
            if (kodeTransaksi != null) {
                String sql = "SELECT kode_pelanggan FROM transaksi WHERE kode_transaksi = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setString(1, kodeTransaksi);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("kode_pelanggan");
                }
            }
        } catch (Exception e) {
            System.out.println("getPelangganForDelete ERROR: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "getPelangganForDelete ERROR: " + e.getMessage());
        }
        return null;
    }


    /* edit transaksi */
    private void edit() {
        SwingUtilities.invokeLater(() -> {
           int selectedRow = table.getSelectedRow();

           String idEdit;

           if (selectedRow == -1) {
               JOptionPane.showMessageDialog(null, "Mohon Pilih Barisan Yang di Table Ingin Diubah");
               idEdit = ""; // Set idEdit to 0 if no row is selected
           } else {
               idEdit = String.valueOf(table.getValueAt(selectedRow, table.getColumn("KODE").getModelIndex()));
           }

           if (idEdit != "") {
//            formTransaksi panel = new formTransaksi(idEdit);
//            panel.setVisible(true);
            System.out.println("idEdit: "+ idEdit);
            if (mainInstance != null) {
                mainInstance.showFormOwner(new transaksi.formTransaksi(idEdit));
            } else {
                System.out.println("Error. Objek Main Belum ditetapkan");
            }
           }
        });
    }  
    
    
    /* Table */
    private void tabel() {
        TableCustomizer.customizeTable(table);
        

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 6 ? PanelAction.class : super.getColumnClass(columnIndex);
            }
           @Override
            public boolean isCellEditable(int row, int column){
                return column == 6;
            }
        }; 
        model.addColumn("KODE");
        model.addColumn("Nama Pelanggan");
        model.addColumn("Nama Pegawai");
        model.addColumn("Status Pembayaran");
        model.addColumn("Status Laundry");
        model.addColumn("Total Pembayaran");
        model.addColumn("Batas Waktu");
        model.addColumn("Action");
        try {
            model.setRowCount(0); 
            con = koneksi.configDB();
            stat = con.createStatement();
            String sql = "SELECT * FROM transaksi";
            res = stat.executeQuery(sql);{
             while (res.next()) {
             String namaPelanggan = getNamaPelanggan(res.getString("kode_pelanggan"));
             String namaPegawai = getNamaPegawai(res.getString("id_user"));
             model.addRow(new Object[]{
                        res.getString("kode_transaksi"),
                        namaPelanggan,
                        namaPegawai,
                        res.getString("status_pembayaran"),
                        res.getString("transaksi.status_laundry"),
                        res.getString("totalPembayaran"),
                        res.getString("batas_waktu"),
                        new PanelAction()
                    });
                }
                table.setModel(model);
                table.getTableHeader().setReorderingAllowed(false);
                table.getColumnModel().getColumn(7).setCellRenderer(new TableActionCellRender());
                table.getColumnModel().getColumn(7).setCellEditor(new TableActionCellEditor(new TableActionEvent() {
                    @Override
                    public void onEdit(int row) {
                     edit();
                    }
                    @Override
                    public void onDelete(int row) {
                     delete();
                    }
                    @Override
                    public void onView(int row) {
//                        int barisTerpilih = tabels.getSelectedRow();
//                        int idproduk = Integer.parseInt(tabels.getValueAt(barisTerpilih, 0).toString());
//                        tampilkanDetailProduk( idproduk);
                    }
                }));         
            }    
            
            table.getColumnModel().getColumn(7).setPreferredWidth(75); // Lebar preferensi
          
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memuat data.");
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField caris;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlabel;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
